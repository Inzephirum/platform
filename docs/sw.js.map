{"version":3,"sources":["platform/channel/channel.ts","platform/channel/service-worker-channel.ts","sw.ts"],"names":[],"mappings":";AAyFC,aA9ED,SAAS,IACA,OAAA,KAAK,SACT,SAAS,IACT,OAAO,EAAG,GAQT,SAAU,EACd,EACA,GAEM,IAAA,EAAM,IACN,EAA+B,GAEjC,GAAU,EACV,EAAwB,GAEnB,SAAA,EACP,EACA,QAAA,IAAA,IAAA,EAAA,CAAyB,MAAM,IAE/B,EAAU,QAAQ,SAAA,IACZ,EAAQ,KAAK,MAAQ,GAAQ,EAAQ,OAIzC,EAAS,KAIJ,SAAA,EAAK,EAA6B,QAAA,IAAA,IAAA,EAAA,IACnC,IAAA,EAA2B,CAC/B,MAAK,EACL,KAAM,CACJ,IAAG,EACH,KAAI,IAIR,EAAgB,EAAS,GAEpB,EAKL,EAAS,KAAK,GAJZ,EAAM,KAAK,CAAE,MAAK,EAAE,QAAO,IAezB,IAAA,EAAU,CACd,KAAI,EACJ,OAVO,SAAO,GAEP,OADP,EAAU,KAAK,GACR,WACC,IAAA,EAAM,EAAU,QAAQ,GAC9B,EAAU,OAAO,EAAK,KAOxB,OAAM,WACG,OAAA,IAYJ,OARP,EAAS,OAAO,GAEhB,EAAS,QAAQ,KAAK,WACpB,GAAU,EACV,EAAM,QAAQ,SAAA,GAAK,OAAA,EAAK,EAAE,MAAO,EAAE,WACnC,EAAQ,KAGH,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA;;ACnBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,4BAAA,EAAA,QAAA,cAAA,EAtED,IAAA,EAAA,QAAA,aAUA,SAAS,IACD,IAAA,EAAc,kBAAmB,UAkChC,MAAA,CACL,KAzBO,SAAK,GAC+B,OAAvC,UAAU,cAAc,WAK5B,UAAU,cAAc,WAAW,YAAY,GAb1C,GACH,QAAQ,IACN,4GA+BJ,OAjBO,SAAO,GACR,IAAA,EAAa,SAAC,GAClB,EAAS,EAAM,OAKV,OAFP,UAAU,cAAc,iBAAiB,UAAW,GAE7C,WACL,OAAA,UAAU,cAAc,oBAAoB,UAAW,KAUzD,MAPO,WACA,OAAA,UAAU,cAAc,oBAU7B,SAAU,EAA4B,GAC1C,EAAG,iBAAiB,UAAW,SAAC,GAC9B,EAAE,UACA,EAAG,QAAQ,WAAW,KAAK,SAAA,GACpB,GAA8B,IAAnB,EAAQ,QAGxB,EAAQ,QAAQ,SAAA,GACd,EAAO,YAAY,EAAE,aAOzB,SAAU,EAAc,GACtB,IAAA,EAAW,IACV,OAAA,EAAkB,EAAA,eAAA,EAAU;;ACnErC,aAFA,IAAA,EAAA,QAAA,8CAEA,EAA4B,EAAA,6BAAA","file":"sw.js","sourceRoot":"../src","sourcesContent":["import {\n  PlatformMessage,\n  PlatformInputMessage,\n  PlatformChannel,\n  PlatformChannelStrategy,\n  ClientUID,\n  SendOptions,\n  ChannelListener,\n  UnsubFromChannel,\n} from './types';\n\nfunction createUID(): ClientUID {\n  return Math.random()\n    .toString(16)\n    .substr(2, 8);\n}\n\ninterface QueueMessage {\n  input: PlatformInputMessage;\n  options: SendOptions;\n}\n\nexport function createChannel(\n  strategy: PlatformChannelStrategy,\n  name?: string\n): PlatformChannel {\n  const uid = createUID();\n  const listeners: ChannelListener[] = [];\n\n  let isReady = false;\n  let queue: QueueMessage[] = [];\n\n  function notifyListeners(\n    message: PlatformMessage,\n    options: SendOptions = { self: false }\n  ) {\n    listeners.forEach(listener => {\n      if (message.from.uid === uid && !options.self) {\n        return;\n      }\n\n      listener(message);\n    });\n  }\n\n  function send(input: PlatformInputMessage, options: SendOptions = {}) {\n    const message: PlatformMessage = {\n      input,\n      from: {\n        uid,\n        name,\n      },\n    };\n\n    notifyListeners(message, options);\n\n    if (!isReady) {\n      queue.push({ input, options });\n      return;\n    }\n\n    strategy.send(message);\n  }\n\n  function listen(listener: ChannelListener): UnsubFromChannel {\n    listeners.push(listener);\n    return () => {\n      const idx = listeners.indexOf(listener);\n      listeners.splice(idx, 1);\n    };\n  }\n\n  const channel = {\n    send,\n    listen,\n    getUid() {\n      return uid;\n    },\n  };\n\n  strategy.listen(notifyListeners);\n\n  strategy.ready().then(() => {\n    isReady = true;\n    queue.forEach(m => send(m.input, m.options));\n    queue = [];\n  });\n\n  return channel;\n}\n","import { createChannel as createBaseChannel } from './channel';\nimport {\n  PlatformMessage,\n  PlatformChannel,\n  PlatformChannelStrategy,\n  ChannelListener,\n  WorkerExtendableEvent,\n  WorkerMessageEvent,\n} from './types';\n\nfunction createServiceWorkerStrategy(): PlatformChannelStrategy {\n  const isSupported = 'serviceWorker' in navigator;\n\n  function notifyAboutSupport() {\n    if (!isSupported) {\n      console.log(\n        'ServiceWorker не поддерживается данным браузером. Использование PlatformChannel не будет иметь эффекта.'\n      );\n    }\n  }\n\n  function send(message: PlatformMessage) {\n    if (navigator.serviceWorker.controller === null) {\n      notifyAboutSupport();\n      return;\n    }\n\n    navigator.serviceWorker.controller.postMessage(message);\n  }\n\n  function listen(listener: ChannelListener) {\n    const swListener = (event: WorkerMessageEvent) => {\n      listener(event.data);\n    };\n\n    navigator.serviceWorker.addEventListener('message', swListener);\n\n    return () =>\n      navigator.serviceWorker.removeEventListener('message', swListener);\n  }\n\n  function ready() {\n    return navigator.serviceWorker.getRegistration();\n  }\n\n  return {\n    send,\n    listen,\n    ready,\n  };\n}\n\nexport function setupChannelInServiceWorker(sw: ServiceWorkerGlobalScope) {\n  sw.addEventListener('message', (e: WorkerExtendableEvent) => {\n    e.waitUntil(\n      sw.clients.matchAll().then(clients => {\n        if (!clients || clients.length === 0) {\n          return;\n        }\n        clients.forEach(client => {\n          client.postMessage(e.data);\n        });\n      })\n    );\n  });\n}\n\nexport function createChannel(name?: string): PlatformChannel {\n  const strategy = createServiceWorkerStrategy();\n  return createBaseChannel(strategy, name);\n}\n","import { setupChannelInServiceWorker } from './platform/channel/service-worker-channel';\n\nsetupChannelInServiceWorker(self as unknown as ServiceWorkerGlobalScope);\n"]}