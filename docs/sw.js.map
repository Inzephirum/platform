{"version":3,"sources":["platform/channel.ts","platform/index.ts","sw.ts"],"names":[],"mappings":";AAiJC,aA1GD,SAAS,IACA,OAAA,KAAK,SACT,SAAS,IACT,OAAO,EAAG,GAGT,SAAU,EAAc,GACtB,IAAA,EAAM,IACN,EAA+B,GAE/B,EAAyB,kBAAmB,UAE9C,GAAc,EACd,EAAiE,GAE5D,SAAA,EAAK,EAA6B,GA2F5C,IAAA,OA3F4C,IAAA,IAAA,EAAA,IACpC,IAIA,GAAsD,OAAvC,UAAU,cAAc,WAK5C,UAAU,cAAc,WAAW,YAAY,CAC7C,KAAM,CACJ,KAAkB,QAAd,EAAE,EAAQ,YAAI,IAAA,GAAA,GAEpB,QAAS,CACP,MAAK,EACL,KAAM,CACJ,IAAG,EACH,KAAI,MAZR,EAAM,KAAK,CAAE,MAAK,EAAE,QAAO,KA8BzB,IAAA,EAAU,CACd,KAAI,EACJ,OAdO,SAAO,GACV,OAAC,GAIL,EAAU,KAAK,GACR,WACC,IAAA,EAAM,EAAU,QAAQ,GAC9B,EAAU,OAAO,EAAK,KANf,cAaT,OAAM,WACG,OAAA,IAIP,OAAC,GAQL,UAAU,cAAc,kBAAkB,KAAK,WAC7C,GAAc,EACd,EAAM,QAAQ,SAAA,GAAK,OAAA,EAAK,EAAE,MAAO,EAAE,WACnC,EAAQ,KAGV,UAAU,cAAc,iBACtB,UACA,SAAC,IACK,EAAM,KAAK,QAAQ,KAAK,MAAQ,GAAQ,EAAM,KAAK,KAAK,OAI5D,EAAU,QAAQ,SAAA,GAChB,EAAS,EAAM,KAAK,aAKnB,IA1BL,QAAQ,IACN,2GAGK,GA6BL,SAAU,EAA4B,GAC1C,EAAG,iBAAiB,UAAW,SAAC,GAC9B,EAAE,UACA,EAAG,QAAQ,WAAW,KAAK,SAAA,GACpB,GAA8B,IAAnB,EAAQ,QAGxB,EAAQ,QAAQ,SAAA,GACd,EAAO,YAAY,EAAE,aAK9B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAA,QAAA,4BAAA;;ACjJD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,iBAAA,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAAA,OAAA,eAAA,QAAA,uBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,wBAAA,OAAA,eAAA,QAAA,8BAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,+BAAA,IAAA,EAAA,QAAA;;ACEA,aAFA,IAAA,EAAA,QAAA,eAEA,EAA4B,EAAA,6BAAA","file":"sw.js","sourceRoot":"../src","sourcesContent":["export interface PlatformInputMessage {\n  name: string;\n  meta?: {\n    [key: string]: any;\n  };\n  body: any;\n}\n\nexport interface PlatformMessage {\n  input: PlatformInputMessage;\n  from: {\n    uid: string;\n    name?: string;\n  };\n}\n\ninterface SWMessageEvent extends MessageEvent {\n  data: {\n    message: PlatformMessage;\n    meta: {\n      self?: boolean;\n    };\n  };\n}\n\nexport type UnsubFromChannel = () => void;\nexport type ChannelListener = (message: PlatformMessage) => void;\nexport type ClientUID = string;\n\ninterface SendOptions {\n self?: boolean;\n}\n\nexport interface PlatformChannel {\n  send(message: PlatformInputMessage, options?: SendOptions): void;\n  listen(listener: ChannelListener): UnsubFromChannel;\n  getUid(): string;\n}\n\nfunction createUID(): ClientUID {\n  return Math.random()\n    .toString(16)\n    .substr(2, 8);\n}\n\nexport function createChannel(name?: string): PlatformChannel {\n  const uid = createUID();\n  const listeners: ChannelListener[] = [];\n\n  const serviceWorkerSupported = 'serviceWorker' in navigator;\n\n  let isRegistred = false;\n  let queue: { input: PlatformInputMessage, options: SendOptions }[] = [];\n\n  function send(input: PlatformInputMessage, options: SendOptions = {}) {\n    if (!serviceWorkerSupported) {\n      return;\n    }\n\n    if (!isRegistred || navigator.serviceWorker.controller === null) {\n      queue.push({ input, options });\n      return;\n    }\n\n    navigator.serviceWorker.controller.postMessage({\n      meta: {\n        self: options.self ?? false,\n      },\n      message: {\n        input,\n        from: {\n          uid,\n          name,\n        },\n      },\n    });\n  }\n\n  function listen(listener: ChannelListener): UnsubFromChannel {\n    if (!serviceWorkerSupported) {\n      return () => {};\n    }\n\n    listeners.push(listener);\n    return () => {\n      const idx = listeners.indexOf(listener);\n      listeners.splice(idx, 1);\n    };\n  }\n\n  const channel = {\n    send,\n    listen,\n    getUid() {\n      return uid;\n    },\n  };\n\n  if (!serviceWorkerSupported) {\n    console.log(\n      'ServiceWorker не поддерживается данным браузером. Использование PlatformChannel не будет иметь эффекта.'\n    );\n\n    return channel;\n  }\n\n  navigator.serviceWorker.getRegistration().then(() => {\n    isRegistred = true;\n    queue.forEach(m => send(m.input, m.options));\n    queue = [];\n  });\n\n  navigator.serviceWorker.addEventListener(\n    'message',\n    (event: SWMessageEvent) => {\n      if (event.data.message.from.uid === uid && !event.data.meta.self) {\n        return;\n      }\n\n      listeners.forEach(listener => {\n        listener(event.data.message);\n      });\n    }\n  );\n\n  return channel;\n}\n\ninterface SWPlatformMessageEvent extends ExtendableEvent {\n  data: PlatformMessage;\n}\n\nexport function setupChannelInServiceWorker(sw: ServiceWorkerGlobalScope) {\n  sw.addEventListener('message', (e: SWPlatformMessageEvent) => {\n    e.waitUntil(\n      sw.clients.matchAll().then(clients => {\n        if (!clients || clients.length === 0) {\n          return;\n        }\n        clients.forEach(client => {\n          client.postMessage(e.data);\n        });\n      })\n    );\n  });\n}\n","export { createChannel, PlatformMessage, PlatformInputMessage, setupChannelInServiceWorker } from './channel';\n","import { setupChannelInServiceWorker } from './platform';\n\nsetupChannelInServiceWorker(self as unknown as ServiceWorkerGlobalScope);\n"]}